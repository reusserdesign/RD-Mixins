// Mixin: rdVerticalCenter
// Vertical center a block element. Add a height and width value and the block will be positioned (absolutely) in the containing element.
//
// .foo {
//     rdVerticalCenter(height, width);
// }
// ====================================================================
@mixin rdVerticalCenter($height, $width) {
	height: $height;
	left: 50%;
	margin: (-$height / 2) 0 0 (-$width / 2);
	position: absolute;
	top: 50%;
	width: $width;
}

// Mixin: rdAnimation
// CSS3-based animation call with values for animation, time, easing, delay, transition, and direction.
//
// .foo {
//     @include rdAnimation(fade, 1s, ease, 3s, 1, forwards);
// }
// ====================================================================
@mixin rdAnimation($animation, $time, $easing, $delay, $transition, $direction) {
	-webkit-animation: $animation $time $easing $delay $transition $direction;
	-moz-animation: $animation $time $easing $delay $transition $direction;
	-ms-animation: $animation $time $easing $delay $transition $direction;
	-o-animation: $animation $time $easing $delay $transition $direction;
	animation: $animation $time $easing $delay $transition $direction;
}

// Mixin: rdKeyframes
// CSS3-based animation keyframes. Requires a name and events from 0% (from) to 100% (to).
//
// .foo {
//     @include keyframes(fade) {
//         0% { opacity: 0; }
//         100% { opacity: 1; }
//     }
// }
// ====================================================================
@mixin rdKeyframes($name) {
	@-webkit-keyframes #{$name} {
		@content; 
	}
	@-moz-keyframes #{$name} {
		@content;
	}
	@-ms-keyframes #{$name} {
		@content;
	}
	@keyframes #{$name} {
		@content;
	} 
}

// Mixin: rdColumns
// Create columns automatically to fill the containing element. Specify the amount of columns in each row and add an optional gutter size (2% is default).
//
// .foo {
//     @include rdColumns(5);
// }
// ====================================================================
@mixin rdColumns($totalInRow, $gutter: 2%) {
	float: left;
	width: (100% - ($gutter * ($totalInRow - 1))) / $totalInRow;
	&:nth-child(1n) {
		margin-right: $gutter;
	}
	&:nth-child(#{$totalInRow}n) {
		margin-right: 0;
	}
	@if $totalInRow > 1 {
		margin-bottom: $gutter;
	}
}